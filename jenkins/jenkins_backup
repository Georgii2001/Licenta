def loadEnvironmentVariables(path){
    def props = readProperties file: path
    keys= props.keySet()
    for(key in keys) {
        value = props["${key}"]
        env."${key}" = "${value}"
    }
}

node {
    stage('Load environment variables') {
        withCredentials([file(credentialsId: 'befa8383-be48-44da-a781-8b0a561f772e', variable: 'secret_file')]) {
           loadEnvironmentVariables(secret_file)
        }
    }
}

pipeline {
    
    agent any

    parameters {
        choice(name:'DEPLOY_ENV', choices: ['dev', 'test', 'prodlike' ,'prod'], description: 'Please choose on which environtment you want to deploy to.')
        gitParameter branchFilter: 'origin/(.*)',
                    defaultValue: 'develop',
                    name: 'BRANCH_NAME', 
                    type: 'PT_BRANCH',
                    quickFilterEnabled: true,
                    sortMode: 'ASCENDING_SMART',
                    selectedValue: 'DEFAULT',
                    useRepository: 'https://gitlab.itsmartsystems.eu/smartpay/smartpay-authenticate'
    }

    stages {

        stage("Cleanup previous workspace"){
            steps{
                cleanWs()
            }
        }
        
        stage('Checkout sources'){
            steps{
                git branch: "${BRANCH_NAME}",
                    credentialsId: 'f6a9ca17-db92-4b2a-9ed2-8b4e490e9677',
                    url: 'https://gitlab.itsmartsystems.eu/smartpay/smartpay-authenticate.git'
            }
        }      
        
        stage('Build JAR') {
            when { expression { env.IMAGE_TAG == "" } }
            steps {
                      script {
                            if( env.DEPLOY_ENV == 'dev') {
                                withMaven(maven: 'jenkins-maven', jdk: 'jdk_11') {
                                    sh '''
                                        mvn clean install -s $SMARTPAY_NEXUS_SETTINGS
                                        '''                    
                                }                      
                            }else if( env.DEPLOY_ENV == 'test' || env.DEPLOY_ENV == 'prodlike') {
                                withMaven(maven: 'jenkins-maven', jdk: 'jdk_11') {
                                    sh '''
                                        mvn clean install -s $SMARTPAY_NEXUS_SETTINGS
                                        '''                    
                                }                      
                            }else if( env.DEPLOY_ENV == 'prod' ){
                                if( params.BRANCH_NAME == 'master' || params.BRANCH_NAME.endsWith('-RC') == true) {
                                    withMaven(maven: 'jenkins-maven', jdk: 'jdk_11') {
                                        sh '''
                                            mvn clean install -s $SMARTPAY_NEXUS_SETTINGS
                                            '''                    
                                    }
                                }else{
                                    echo "To deploy to PROD please select either master or *-RC branch"
                                    currentBuild.result = 'ABORTED'
                                    error("Aborting the job.")                
                                }                   
                            }else {
                                echo "To deploy to PROD please select either master or *-RC branch"
                                currentBuild.result = 'ABORTED'
                                error("Aborting the job.")
                            }
                        }
                    }
        }
        
      stage('Git Tag') {
            when { expression { env.IMAGE_TAG == "" } }
            steps {
                withCredentials([usernamePassword(credentialsId: 'f6a9ca17-db92-4b2a-9ed2-8b4e490e9677',
                    passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                        sh '''
                        #!/bin/bash

                        #get highest tag number
                        #VERSION=`git describe --abbrev=0`
                        VERSION=`git describe --tags $(git rev-list --tags --max-count=1)`

                        if [ -z $VERSION ];then
                            NEW_TAG="1.0"
                            echo "No tag present."
                            echo "Creating tag: $NEW_TAG"
                            git tag $NEW_TAG
                            git push --tags
                            echo "Tag created and pushed: $NEW_TAG"
                            exit 0;
                        fi

                        #replace . with space so can split into an array
                        VERSION_BITS=(${VERSION//./ })

                        #get number parts and increase last one by 1
                        VNUM1=${VERSION_BITS[0]}
                        VNUM2=${VERSION_BITS[1]}
                        VNUM2=$((VNUM2+1))

                        #create new tag
                        NEW_TAG="${VNUM1}.${VNUM2}"

                        #get current hash and see if it already has a tag
                        GIT_COMMIT=`git rev-parse HEAD`
                        CURRENT_COMMIT_TAG=`git describe --contains $GIT_COMMIT 2>/dev/null`

                        #only tag if no tag already (would be better if the git describe command above could have a silent option)
                        if [ -z "$CURRENT_COMMIT_TAG" ]; then
                            echo "Updating $VERSION to $NEW_TAG"
                            git tag $NEW_TAG
                            git push --tags
                            echo "Tag created and pushed: $NEW_TAG"
                        else
                            echo "This commit is already tagged as: $CURRENT_COMMIT_TAG"
                        fi
                        FINAL=`git describe --abbrev=0 --tags`
                        echo $FINAL > app.version
                        export VERSION=$NEW_VERSION
                '''
                        sh 'cat app.version'
                    }
            }
        }

        stage('Build image') {
            when { expression { env.IMAGE_TAG == "" } }
            steps {
                script {
                    if( env.DEPLOY_ENV ){
                        if( env.DEPLOY_ENV == 'dev' ) {
                            sh '''
                                export VERSION=$(cat app.version)
                                export current_env=${DEPLOY_ENV}
                                . Scripts/export.sh
                                cp target/authenticate-*.jar deploy/${current_env}
                                cp src/main/resources/application-${current_env}.yml deploy/${current_env}
                                aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin $ECR
                                docker build -t $ECR/smartpay-authenticate"${REPO}":"${VERSION}"  -f deploy/${current_env}/Dockerfile deploy/${current_env}
                                docker push $ECR/smartpay-authenticate"${REPO}":"${VERSION}"
                                docker rmi -f $ECR/smartpay-authenticate"${REPO}":"${VERSION}"
                                rm target/*.jar
                                rm deploy/${current_env}/*.jar

                            '''
                        }else if( env.DEPLOY_ENV == 'test' || env.DEPLOY_ENV == 'prodlike' ) {
                            sh '''
                                export VERSION=$(cat app.version)
                                export current_env=${DEPLOY_ENV}
                                . Scripts/export.sh
                                cp target/authenticate-*.jar deploy/${current_env}
                                cp src/main/resources/application-${current_env}.yml deploy/${current_env}
                                aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin $ECR
                                docker build -t $ECR/smartpay-authenticate"${REPO}":"${VERSION}"  -f deploy/${current_env}/Dockerfile deploy/${current_env}
                                docker push $ECR/smartpay-authenticate"${REPO}":"${VERSION}"
                                docker rmi -f $ECR/smartpay-authenticate"${REPO}":"${VERSION}"
                                rm target/*.jar
                                rm deploy/${current_env}/*.jar

                            '''
                        }else if( env.DEPLOY_ENV == 'prod' ){
                            sh '''
                                export VERSION=$(cat app.version)
                                export current_env=${DEPLOY_ENV}
                                set -e
                                set +x
                                case $current_env in 

                                    dev)
                                        export AWS_ACCESS_KEY_ID=${DEV_AWS_ACCESS_KEY_ID} 
                                        export AWS_SECRET_ACCESS_KEY=${DEV_AWS_SECRET_ACCESS_KEY}
                                        export ECR=${DEV_ECR}
                                        export NAMESPACE=${DEV_NAMESPACE}
                                        export REPO=${DEV_REPO}
                                        ;; 
                                    test)
                                        export AWS_ACCESS_KEY_ID=${TEST_AWS_ACCESS_KEY_ID}
                                        export AWS_SECRET_ACCESS_KEY=${TEST_AWS_SECRET_ACCESS_KEY}
                                        export ECR=${TEST_ECR}
                                        export NAMESPACE=${TEST_NAMESPACE}
                                        export REPO=${TEST_REPO}
                                        ;;
                                    prod)
                                        export AWS_ACCESS_KEY_ID=${PROD_AWS_ACCESS_KEY_ID}
                                        export AWS_SECRET_ACCESS_KEY=${PROD_AWS_SECRET_ACCESS_KEY}
                                        export SMARTPAY_CLUSTER=${PROD_SMARTPAY_CLUSTER}
                                        export ECR=${PROD_ECR}
                                        export NAMESPACE=${PROD_NAMESPACE}
                                        export KEYCLOAK_PASSWORD=${PROD_KEYCLOAK_APP_PASS}
                                        export REPO=${PROD_REPO}
                                        ;;
                                esac

                                cp target/authenticate-*.jar deploy/${current_env}
                                cp src/main/resources/application-${current_env}.yml deploy/${current_env}
                                aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin $ECR
                                docker build -t $ECR/smartpay-authenticate"${REPO}":"${VERSION}"  -f deploy/${current_env}/Dockerfile deploy/${current_env}
                                docker push $ECR/smartpay-authenticate"${REPO}":"${VERSION}"
                                docker rmi -f $ECR/smartpay-authenticate"${REPO}":"${VERSION}"
                                rm target/*.jar
                                rm deploy/${current_env}/*.jar

                            '''                    
                        }
                    }
                }
            }
        }

        stage('Deploy App') {
            steps {
                wrap([$class: 'BuildUser']) {
                    script {
                        if( env.DEPLOY_ENV ){
                            if( env.DEPLOY_ENV == 'dev') {
                                sh '''#!/bin/bash
                                if [[ "$IMAGE_TAG" == "" ]]
                                then
                                    export VERSION=$(cat app.version)
                                else
                                    export VERSION=$IMAGE_TAG
                                fi
                                export current_env=$DEPLOY_ENV
                                . Scripts/export.sh
                         # Debugging pentru variabila CLUSTER
                                echo "Valoarea lui CLUSTER: '$CLUSTER'"
                                echo "$CLUSTER" | od -c

                        # Eliminare spații suplimentare
                                CLUSTER=$(echo "$CLUSTER" | tr -d '\n' | xargs)
                                if [[ -n "$CLUSTER" ]]
                                then
                                    export SMARTPAY_CLUSTER=$CLUSTER
                                fi   
                                . Scripts/container-deployment.sh 
                                '''
                            }else if( env.DEPLOY_ENV == 'test' || env.DEPLOY_ENV == 'prodlike' ) {
                                sh '''#!/bin/bash
                                if [[ "$IMAGE_TAG" == "" ]]
                                then
                                    export VERSION=$(cat app.version)
                                else
                                    export VERSION=$IMAGE_TAG
                                fi
                                export current_env=$DEPLOY_ENV
                                . Scripts/export.sh
                         # Debugging pentru variabila CLUSTER
                                echo "Valoarea lui CLUSTER: '$CLUSTER'"
                                echo "$CLUSTER" | od -c

                        # Eliminare spații suplimentare
                                CLUSTER=$(echo "$CLUSTER" | tr -d '\n' | xargs)
                                if [[ -n "$CLUSTER" ]]
                                then
                                    export SMARTPAY_CLUSTER=$CLUSTER
                                fi   
                                . Scripts/container-deployment.sh 
                                '''
                            }else if( env.DEPLOY_ENV == 'prod'){
                                sh '''#!/bin/bash
                                if [[ "$IMAGE_TAG" == "" ]]
                                then
                                    export VERSION=$(cat app.version)
                                else
                                    export VERSION=$IMAGE_TAG
                                fi
                                export current_env=$DEPLOY_ENV
                                . Scripts/export.sh
                         # Debugging pentru variabila CLUSTER
                                echo "Valoarea lui CLUSTER: '$CLUSTER'"
                                echo "$CLUSTER" | od -c

                        # Eliminare spații suplimentare
                                CLUSTER=$(echo "$CLUSTER" | tr -d '\n' | xargs)
                                if [[ -n "$CLUSTER" ]]
                                then
                                    export SMARTPAY_CLUSTER=$CLUSTER
                                fi   
                                . Scripts/container-deployment.sh 
                                '''                    
                            } else {
                                echo "You do not have permissions to deploy"
                                currentBuild.result = 'ABORTED'
                                error("Aborting the job.")
                            }
                        }
                    }
                }    
            }
        }
    }
    post{
        success{ 
            script{
                def jobName = currentBuild.fullDisplayName
                emailext body: '''<style>BODY, TABLE, TD, TH, P{font-family: Calibri, Verdana, Helvetica, sans serif; font-size: 12px; color: black;}, .section {width: 100%; border: thin black dotted;}, .tr-title {background-color: #27AE60;}, .td-title {color: white; font-size: 120%; font-weight: bold; padding-left: 5px; text-transform: uppercase;}</style> \
                    ${SCRIPT, template="groovy-html.template"}\
                     ''', 
                     mimeType: 'text/html',
                     compressLog: true,
                     subject: "[Jenkins] [${DEPLOY_ENV}] ${jobName} completed successfully",
                     attachmentsPattern: 'sonarReport/*.docx',
                     from: 'jenkins-macmini@itsmartsystems.eu',
                     to: 'smartpay.dev@itsmartsystems.eu'
            }
            sh 'rm -rf ${WORKSPACE}/sonarReport'
        }
        failure{ 
            script{
                def jobName = currentBuild.fullDisplayName
                emailext body: '${SCRIPT, template="groovy-html.template"} <h2>For detailed information please check the job log at:</h2><h3>$BUILD_URL</h3>', 
                     mimeType: 'text/html',
                     subject: "[Jenkins] [${DEPLOY_ENV}] ${jobName} has failed",
                     from: 'jenkins-macmini@itsmartsystems.eu',
                     to: 'lucian.constantinescu@itsmartsystems.eu, andrei.mircea@itsmartsystems.eu'
            }
            sh 'rm -rf ${WORKSPACE}/sonarReport'
        }
        aborted{ 
            script{
                def jobName = currentBuild.fullDisplayName
                emailext body: '${SCRIPT, template="groovy-html.template"} <h2>For detailed information please check the job log at:</h2><h3>$BUILD_URL</h3>', 
                     mimeType: 'text/html',
                     subject: "[Jenkins] [${DEPLOY_ENV}] ${jobName} was aborted",
                     from: 'jenkins-macmini@itsmartsystems.eu',
                     to: 'lucian.constantinescu@itsmartsystems.eu, andrei.mircea@itsmartsystems.eu'
            }
            sh 'rm -rf ${WORKSPACE}/sonarReport'
        }
    }
}
